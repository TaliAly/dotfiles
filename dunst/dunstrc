[global]
    monitor = 0
    follow = none

    ## geometry
    width = (0, 512)
    height = 256
    origin = top-right
    offset = 32x32
    scale = 0
    notification_limit = 4

    ## progress bar
    progress_bar = true
    progress_bar_height = 16
    progress_bar_frame_width = 1
    progress_bar_min_width = 150
    progress_bar_max_width = 300

	## appearance
    indicate_hidden = yes
    transparency = 0

    padding = 16
    horizontal_padding = 16
    text_icon_padding = 16

	separator_height = 2
	gap_size = 0
    frame_width = 2
    frame_color = "#928374"
    separator_color = frame
	corner_radius = 0

	font = Monospace 10
	line_height = 0
	alignment = left
	vertical_alignment = center

	## other
    sort = yes
    markup = full
	show_age_threshold = 60
	ellipsize = middle
	ignore_newline = no
	stack_duplicates = true
	hide_duplicate_count = false
	show_indicators = yes
	ignore_dbusclose = false
	dmenu = /usr/local/bin/dmenu -p dunst:
	browser = /usr/bin/xdg-open
	always_run_script = true
	title = Dunst
	class = Dunst

    # %a  appname
    # %s  summary
    # %b  body
    # %i  iconname (including its path)
    # %I  iconname (without its path)
    # %p  progress value if set ([  0%] to [100%]) or nothing
    # %n  progress value if set without any extra characters
    # %%  Literal %
    format = "<b>%s</b>\n%b"

    ## icons
    icon_position = left
    min_icon_size = 144 
    max_icon_size = 144 
    icon_path = /dev/null

    ## history
    sticky_history = yes
    history_length = 20

    ## wayland/legacy
    force_xwayland = false
    force_xinerama = false

    ## mouse

    # Defines list of actions for each mouse event
    # Possible values are:
    # * none: Don't do anything.
    # * do_action: Invoke the action determined by the action_name rule. If there is no
    #              such action, open the context menu.
    # * open_url: If the notification has exactly one url, open it. If there are multiple
    #             ones, open the context menu.
    # * close_current: Close current notification.
    # * close_all: Close all notifications.
    # * context: Open context menu for the notification.
    # * context_all: Open context menu for all notifications.
    # These values can be strung together for each mouse event, and
    # will be executed in sequence.
    mouse_left_click = do_action, close_current
    mouse_middle_click = context
    mouse_right_click = close_current, close_all

[experimental]
    per_monitor_dpi = false


[urgency_low]
    background = "#d1d2d2"
    foreground = "#454545"
    frame_color = "#b16286"
    timeout = 3

[urgency_normal]
    background = "#d1d2d2"
    foreground = "#454545"
    frame_color = "#458588"
    timeout = 6

[urgency_critical]
    background  = "#d1d2d2"
    foreground  = "#454545"
    frame_color = "#cc241d"
    timeout = 16

# Every section that isn't one of the above is interpreted as a rules to
# override settings for certain messages.
#
# Messages can be matched by
#    appname (discouraged, see desktop_entry)
#    body
#    category
#    desktop_entry
#    icon
#    match_transient
#    msg_urgency
#    stack_tag
#    summary
#
# and you can override the
#    background
#    foreground
#    format
#    frame_color
#    fullscreen
#    new_icon
#    set_stack_tag
#    set_transient
#    set_category
#    timeout
#    urgency
#    icon_position
#    skip_display
#    history_ignore
#    action_name
#    word_wrap
#    ellipsize
#    alignment
#    hide_text
#
# Shell-like globbing will get expanded.
#
# Instead of the appname filter, it's recommended to use the desktop_entry filter.
# GLib based applications export their desktop-entry name. In comparison to the appname,
# the desktop-entry won't get localized.
#
# SCRIPTING
# You can specify a script that gets run when the rule matches by
# setting the "script" option.
# The script will be called as follows:
#   script appname summary body icon urgency
# where urgency can be "LOW", "NORMAL" or "CRITICAL".
#
# NOTE: It might be helpful to run dunst -print in a terminal in order
# to find fitting options for rules.

# Disable the transient hint so that idle_threshold cannot be bypassed from the
# client
#[transient_disable]
#    match_transient = yes
#    set_transient = no
#
# Make the handling of transient notifications more strict by making them not
# be placed in history.
#[transient_history_ignore]
#    match_transient = yes
#    history_ignore = yes

# fullscreen values
# show: show the notifications, regardless if there is a fullscreen window opened
# delay: displays the new notification, if there is no fullscreen window active
#        If the notification is already drawn, it won't get undrawn.
# pushback: same as delay, but when switching into fullscreen, the notification will get
#           withdrawn from screen again and will get delayed like a new notification
#[fullscreen_delay_everything]
#    fullscreen = delay
#[fullscreen_show_critical]
#    msg_urgency = critical
#    fullscreen = show

#[espeak]
#    summary = "*"
#    script = dunst_espeak.sh

#[script-test]
#    summary = "*script*"
#    script = dunst_test.sh

#[ignore]
#    # This notification will not be displayed
#    summary = "foobar"
#    skip_display = true

#[history-ignore]
#    # This notification will not be saved in history
#    summary = "foobar"
#    history_ignore = yes

#[skip-display]
#    # This notification will not be displayed, but will be included in the history
#    summary = "foobar"
#    skip_display = yes

#[signed_on]
#    appname = Pidgin
#    summary = "*signed on*"
#    urgency = low
#
#[signed_off]
#    appname = Pidgin
#    summary = *signed off*
#    urgency = low
#
#[says]
#    appname = Pidgin
#    summary = *says*
#    urgency = critical
#
#[twitter]
#    appname = Pidgin
#    summary = *twitter.com*
#    urgency = normal

[socklog]
	appname = socklog
    format = "<span font="Monospace 11"><b>%s</b></span>\n%b"

[Spotify]
	appname = Spotify
    format = "<span font="Monospace 17"><b>%s</b></span>\n<span font="Monospace 12">%b</span>"
	frame_color = "#98971a"
    timeout = 3
#
# vim: ft=cfg
